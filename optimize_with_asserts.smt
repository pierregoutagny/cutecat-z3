(declare-datatypes ((unit 0)) (((unit))))
(declare-datatypes ((TypeAidesPersonnelleLogement 0)) (((|mk!AidePersonnaliséeLogement| (|AidePersonnaliséeLogement!0| unit)) (mk!AllocationLogementFamiliale (AllocationLogementFamiliale!0 unit)) (mk!AllocationLogementSociale(AllocationLogementSociale!0 unit)))))
(declare-datatypes ((SituationFamilialeCalculAPL 0)) (((mk!PersonneSeule (PersonneSeule!0 unit)) (mk!Couple (Couple!0 unit)))))
(declare-datatypes ((ZoneDHabitation 0)) (((mk!Zone1 (Zone1!0 unit)) (mk!Zone2 (Zone2!0 unit)) (mk!Zone3 (Zone3!0 unit)))))
(declare-fun loyer_principal_in () Int)
(declare-fun |nombre_personnes_à_charge_in| () Int)
(declare-fun |ressources_ménage_arrondies_in| () Int)
(declare-fun |réduction_loyer_solidarité_in| () Int)
(define-funs-rec ( ( !round! ((x!1 Real)) Int))
                 ( (let ((a!1 (- (to_int (+ (- x!1) (/ 1.0 2.0))))))
                     (ite (>= x!1 0.0) (to_int (+ x!1 (/ 1.0 2.0))) a!1))))
(assert (>= loyer_principal_in 0))
(assert (not (not (= |nombre_personnes_à_charge_in| 0))))
(assert (>= |ressources_ménage_arrondies_in| 0))
(assert (>= |réduction_loyer_solidarité_in| 0))
(assert (>= |nombre_personnes_à_charge_in| 0))
(assert (not ((_ is mk!AllocationLogementSociale) (|mk!AidePersonnaliséeLogement| unit))))
(assert (not ((_ is mk!AllocationLogementFamiliale) (|mk!AidePersonnaliséeLogement| unit))))
(assert ((_ is |mk!AidePersonnaliséeLogement|) (|mk!AidePersonnaliséeLogement| unit)))
(assert (= |nombre_personnes_à_charge_in| 0))
(assert (not ((_ is mk!Couple) (mk!PersonneSeule unit))))
(assert ((_ is mk!PersonneSeule) (mk!PersonneSeule unit)))
(assert (= |nombre_personnes_à_charge_in| 0))
(assert (not ((_ is mk!Couple) (mk!PersonneSeule unit))))
(assert ((_ is mk!PersonneSeule) (mk!PersonneSeule unit)))
(assert (= |nombre_personnes_à_charge_in| 0))
(assert (not ((_ is mk!Couple) (mk!PersonneSeule unit))))
(assert ((_ is mk!PersonneSeule) (mk!PersonneSeule unit)))
(assert (= |nombre_personnes_à_charge_in| 0))
(assert (not ((_ is mk!Zone3) (mk!Zone1 unit))))
(assert (not ((_ is mk!Zone2) (mk!Zone1 unit))))
(assert ((_ is mk!Zone1) (mk!Zone1 unit)))
(assert (not (>= |nombre_personnes_à_charge_in| 1)))
(assert (not ((_ is mk!Zone3) (mk!Zone1 unit))))
(assert (not ((_ is mk!Zone2) (mk!Zone1 unit))))
(assert ((_ is mk!Zone1) (mk!Zone1 unit)))
(assert (not ((_ is mk!Zone3) (mk!Zone1 unit))))
(assert (not ((_ is mk!Zone2) (mk!Zone1 unit))))
(assert ((_ is mk!Zone1) (mk!Zone1 unit)))
(assert (not (<= loyer_principal_in 31930)))
(assert (let ((a!1 (to_real ((_ !round! 0)
                      (* 1317.0 (to_real |nombre_personnes_à_charge_in|))))))
(let ((a!2 (>= ((_ !round! 0) (+ (/ 320773.0 100.0) (* (/ 17.0 200.0) a!1)))
               3791)))
  (not a!2))))
(assert (not (= 27828 0)))
(assert (not (= 100.0 (to_real 0))))
(assert (not (= 100000.0 (to_real 0))))
(assert (let ((a!1 ((_ !round! 0)
             (+ (- (/ 16019913.0 1000.0))
                (* (/ 3237.0 100000.0)
                   (to_real |ressources_ménage_arrondies_in|))))))
  (not (not (<= 0 a!1)))))
(assert (let ((a!1 ((_ !round! 0)
             (+ (- (/ 16019913.0 1000.0))
                (* (/ 3237.0 100000.0)
                   (to_real |ressources_ménage_arrondies_in|))))))
(let ((a!2 (+ ((_ !round! 0)
                (* 1317.0 (to_real |nombre_personnes_à_charge_in|)))
              (* (- 1) a!1))))
  (not (<= (- 33947) a!2)))))
(assert-soft (= (mod |réduction_loyer_solidarité_in| 100) 0) :weight 1 :id id!5)
    ;(assert (= (mod |réduction_loyer_solidarité_in| 100) 0))
(assert-soft (= (mod |réduction_loyer_solidarité_in| 10000) 0) :weight 1 :id id!6)
    ;(assert (= (mod |réduction_loyer_solidarité_in| 10000) 0))
(assert-soft (= (mod |ressources_ménage_arrondies_in| 100) 0) :weight 1 :id id!3)
    ;(assert (= (mod |ressources_ménage_arrondies_in| 100) 0))
(assert-soft (= (mod |ressources_ménage_arrondies_in| 10000) 0) :weight 1 :id id!4)
    ;(assert (= (mod |ressources_ménage_arrondies_in| 10000) 0))
(assert-soft (= (mod loyer_principal_in 100) 0) :weight 1 :id id!1)
    ;(assert (= (mod loyer_principal_in 100) 0))
(assert-soft (= (mod loyer_principal_in 10000) 0) :weight 1 :id id!2)
    ;(assert (= (mod loyer_principal_in 10000) 0))
(check-sat)
(get-objectives)
(get-model)
(get-info :all-statistics)
